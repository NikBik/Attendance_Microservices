version: '3.9'

#eureka-naming-server          : 8761
#config-server                 : 8888
#api-gaetway-server            : 8765
#my-sql-server                 : 3306
#record-user-swipes-server     : 8080
#process-user-swipes-server    : 8081
#kafka-listener-swipes-server  : 8082
#zookeeper-server              : 2181
#kafka-server                  : 9092
#prometheus-server             : 9090
#grafana-server                : 3000

services:
    eureka-naming-server:
        build:
            context: ./EurekaServer_Microservice
            dockerfile: Dockerfile
        image: nikbik/eureka_server_image:latest
        container_name: eureka_container
        mem_limit: 700m
        ports:
            - "8761:8761"
        restart: always
        networks:
            - nikbik-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8761"]
            interval: 15s
            timeout: 10s
            retries: 5
                       
    config-server:
        build:
            context: ./ConfigServer_Microservice
            dockerfile: Dockerfile
        image: nikbik/cloud_config_server_image:latest
        container_name: config_server_container
        mem_limit: 700m
        ports:
            - "8888:8888"
        restart: always
        networks:
            - nikbik-network
        environment:
            EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka-naming-server:8761/eureka
        depends_on:
            - eureka-naming-server
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/dev"]
            interval: 15s
            timeout: 10s
            retries: 5
            
    api-gaetway-server:
        build:
            context: ./GatewayServer_Microservice
            dockerfile: Dockerfile
        image: nikbik/api_gateway_image:latest
        container_name: gateway_server_container
        mem_limit: 700m
        ports:
            - "8765:8765"
        restart: always
        networks:
            - nikbik-network
        environment:
            EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka-naming-server:8761/eureka
        depends_on:
            eureka-naming-server:
                condition: service_healthy
                           
    my-sql-server:
        build:
            context: ./MySqlServer_Microservice
            dockerfile: Dockerfile
        image: nikbik/my_sql_image:latest
        container_name: db_container
        ports:
            - "3306:3306"
        networks:
            - nikbik-network
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: attendance_db
            MYSQL_ROOT_PASSWORD: root
            
    record-user-swipes-server:
        build:
            context: ./UserSwipes_MicroService
            dockerfile: Dockerfile
        image: nikbik/user_swipes_image:latest
        container_name: record_swipes_container
        mem_limit: 700m
        ports:
            - "8080:8080"
        networks:
            - nikbik-network
        restart: always
        environment:
            EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka-naming-server:8761/eureka
            SPRING.CONFIG.IMPORT: optional:configserver:http://config-server:8888
        depends_on:
            config-server:
                condition: service_healthy
            eureka-naming-server:
                condition: service_healthy
            
    process-user-swipes-server:
        build:
            context: ./ProcessSwipes_Microservice
            dockerfile: Dockerfile
        image: nikbik/process_user_swipes_image:latest
        container_name: process_swipes_container
        mem_limit: 700m
        ports:
            - "8081:8081"
        restart: always
        networks:
            - nikbik-network
        environment:
            SPRING.KAFKA.PRODUCER.BOOTSTRAP-SERVERS: kafka-server:9092
            EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka-naming-server:8761/eureka
            SPRING.CONFIG.IMPORT: optional:configserver:http://config-server:8888
            SPRING.DATASOURCE.URL: jdbc:mysql://my-sql-server:3306/attendance_db
        depends_on:
            config-server:
                condition: service_healthy
            eureka-naming-server:
                condition: service_healthy
            my-sql-server:
                condition: service_started
            zookeeper-server:
                condition: service_started
            kafka-server:
                condition: service_started

    kafka-listener-swipes-server:
        build:
            context: ./KafkaListener_Microservice
            dockerfile: Dockerfile
        image: nikbik/kafka_listener_image:latest
        container_name: listener_service_container
        mem_limit: 700m
        ports:
            - "8082:8082"
        restart: always
        networks:
            - nikbik-network
        environment:
            SPRING.KAFKA.CONSUMER.BOOTSTRAP-SERVERS: kafka-server:9092
            EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka-naming-server:8761/eureka
            SPRING.CONFIG.IMPORT: optional:configserver:http://config-server:8888
            SPRING.DATASOURCE.URL: jdbc:mysql://my-sql-server:3306/attendance_db
        depends_on:
            config-server:
                condition: service_healthy
            eureka-naming-server:
                condition: service_healthy
            my-sql-server:
                condition: service_started
            zookeeper-server:
                condition: service_started
            kafka-server:
                condition: service_started
    
    zookeeper-server:
        image: confluentinc/cp-zookeeper:latest
        container_name: zookeeper_container
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "2181:2181"   
        restart: always
        networks:
            - nikbik-network
      
    kafka-server:
        image: confluentinc/cp-kafka:latest
        container_name: kafka_container
        ports:
            - "9092:9092"
        networks:
            - nikbik-network
        restart: always
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper-server:2181
            KAFKA_CREATE_TOPICS: "attendance-topic"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        depends_on:
            zookeeper-server:
                condition: service_started
            
    prometheus-server:
        build:
            context: ./PrometheusServer_Microservice
            dockerfile: Dockerfile
        image: nikbik/prometheus_image:latest
        container_name: prometheus_container
        ports:
            - "9090:9090"
        restart: always
        depends_on:
            record-user-swipes-server:
                condition: service_started
            process-user-swipes-server:
                condition: service_started
            kafka-listener-swipes-server:
                condition: service_started
        networks:
            - nikbik-network
            
    grafana-server:
        image: grafana/grafana-oss:8.5.2
        container_name: grafana_container
        ports:
            - "3000:3000"
        depends_on:
            - prometheus-server
        environment:
            - GF_AUTH_ANONYMOUS_ENABLED=true
        volumes:
            - ./GrafanaServer_Microservice/dashboard_provider.yaml:/etc/grafana/provisioning/dashboards/dashboard_provider.yaml
            - ./GrafanaServer_Microservice/Grafana_Dashboard.json:/etc/grafana/provisioning/dashboards/Grafana_Dashboard.json
            - ./GrafanaServer_Microservice/prometheus_datasource.yaml:/etc/grafana/provisioning/datasources/prometheus-datasource.yaml
        networks:
            - nikbik-network
networks:
    nikbik-network: